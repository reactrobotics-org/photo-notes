{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DaleCrowder/photo-notes/components/NewSubmissionForm.tsx"],"sourcesContent":["// ...imports & component shell unchanged...\r\n\r\nexport default function NewSubmissionForm({ userId: _userId }: { userId: string }) {\r\n  // _userId comes from the server gate, but we will not trust it for writes.\r\n  const router = useRouter()\r\n  const supabase = supabaseBrowser()\r\n\r\n  // ...state hooks unchanged...\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    setError(null)\r\n\r\n    if (!file) { setError('Please select a photo.'); return }\r\n\r\n    const trimmed = desc.trim()\r\n    if (!trimmed) { setError('Please write a short description.'); return }\r\n    if (trimmed.length > 2000) { setError('Description is too long (max 2000 chars).'); return }\r\n\r\n    setLoading(true)\r\n    try {\r\n      // âœ… Re-read the authenticated user from Supabase right now\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) {\r\n        setError('You are not signed in.')\r\n        router.replace('/')\r\n        return\r\n      }\r\n      console.log('Submitting as user id:', user.id)\r\n\r\n      // Build a storage key owned by this user (matches any CHECK like user_id::text || '/%')\r\n      const ext = (file.name.split('.').pop() || 'jpg').toLowerCase()\r\n      const key = `${user.id}/${crypto.randomUUID()}.${ext}`\r\n\r\n      // 1) Upload to private bucket\r\n      const { error: upErr } = await supabase\r\n        .storage.from('photos')\r\n        .upload(key, file, {\r\n          cacheControl: '3600',\r\n          upsert: false,\r\n          contentType: file.type || 'image/jpeg',\r\n        })\r\n      if (upErr) throw new Error(upErr.message)\r\n\r\n      // 2) Insert DB row with the SAME user.id\r\n      const { error: dbErr } = await supabase\r\n        .from('submissions')\r\n        .insert({\r\n          user_id: user.id,     // ðŸ‘ˆ must match auth.uid() on the server\r\n          image_path: key,      // e.g., \"<user.id>/<uuid>.jpg\"\r\n          description: trimmed,\r\n        })\r\n      if (dbErr) throw new Error(dbErr.message)\r\n\r\n      router.replace('/my')\r\n    } catch (err: any) {\r\n      setError(err?.message || 'Something went wrong.')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // ...JSX unchanged...\r\n}\r\n"],"names":[],"mappings":"AAAA,4CAA4C;;;;;AAE7B,SAAS,kBAAkB,EAAE,QAAQ,OAAO,EAAsB;IAC/E,2EAA2E;IAC3E,MAAM,SAAS;IACf,MAAM,WAAW;IAEjB,8BAA8B;IAE9B,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,SAAS;QAET,IAAI,CAAC,MAAM;YAAE,SAAS;YAA2B;QAAO;QAExD,MAAM,UAAU,KAAK,IAAI;QACzB,IAAI,CAAC,SAAS;YAAE,SAAS;YAAsC;QAAO;QACtE,IAAI,QAAQ,MAAM,GAAG,MAAM;YAAE,SAAS;YAA8C;QAAO;QAE3F,WAAW;QACX,IAAI;YACF,2DAA2D;YAC3D,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;YACtD,IAAI,CAAC,MAAM;gBACT,SAAS;gBACT,OAAO,OAAO,CAAC;gBACf;YACF;YACA,QAAQ,GAAG,CAAC,0BAA0B,KAAK,EAAE;YAE7C,wFAAwF;YACxF,MAAM,MAAM,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,KAAK,EAAE,WAAW;YAC7D,MAAM,MAAM,GAAG,KAAK,EAAE,CAAC,CAAC,EAAE,OAAO,UAAU,GAAG,CAAC,EAAE,KAAK;YAEtD,8BAA8B;YAC9B,MAAM,EAAE,OAAO,KAAK,EAAE,GAAG,MAAM,SAC5B,OAAO,CAAC,IAAI,CAAC,UACb,MAAM,CAAC,KAAK,MAAM;gBACjB,cAAc;gBACd,QAAQ;gBACR,aAAa,KAAK,IAAI,IAAI;YAC5B;YACF,IAAI,OAAO,MAAM,IAAI,MAAM,MAAM,OAAO;YAExC,yCAAyC;YACzC,MAAM,EAAE,OAAO,KAAK,EAAE,GAAG,MAAM,SAC5B,IAAI,CAAC,eACL,MAAM,CAAC;gBACN,SAAS,KAAK,EAAE;gBAChB,YAAY;gBACZ,aAAa;YACf;YACF,IAAI,OAAO,MAAM,IAAI,MAAM,MAAM,OAAO;YAExC,OAAO,OAAO,CAAC;QACjB,EAAE,OAAO,KAAU;YACjB,SAAS,KAAK,WAAW;QAC3B,SAAU;YACR,WAAW;QACb;IACF;AAEA,sBAAsB;AACxB","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DaleCrowder/photo-notes/app/new/page.tsx"],"sourcesContent":["// app/new/page.tsx\r\nimport { redirect } from 'next/navigation'\r\nimport { cookies } from 'next/headers'\r\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs'\r\nimport NewSubmissionForm from '@/components/NewSubmissionForm'\r\n\r\nexport default async function NewPage() {\r\n  const supabase = createServerComponentClient({ cookies })\r\n  const { data: { user } } = await supabase.auth.getUser()\r\n  if (!user) redirect('/') // your / route should kick off OAuth\r\n  return <NewSubmissionForm userId={user.id!} />\r\n}\r\n"],"names":[],"mappings":"AAAA,mBAAmB;;;;;;AACnB;AAAA;AACA;AACA;AACA;;;;;;AAEe,eAAe;IAC5B,MAAM,WAAW,IAAA,uMAA2B,EAAC;QAAE,SAAA,0IAAO;IAAC;IACvD,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IACtD,IAAI,CAAC,MAAM,IAAA,iMAAQ,EAAC,MAAK,qCAAqC;IAC9D,qBAAO,8OAAC,2IAAiB;QAAC,QAAQ,KAAK,EAAE;;;;;;AAC3C","debugId":null}}]
}