{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DaleCrowder/photo-notes/app/my/page.tsx"],"sourcesContent":["'use client'\r\nimport { useEffect, useState } from 'react'\r\nimport { supabaseBrowser } from '@/lib/supabaseClient'\r\n\r\ntype Row = { id: string; image_path: string; description: string; created_at: string }\r\n\r\nexport default function MySubmissions() {\r\n  const [rows, setRows] = useState<Row[]>([])\r\n  const [urls, setUrls] = useState<Record<string, string>>({})\r\n  const supabase = supabaseBrowser()\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) { location.href = '/(auth)/login'; return }\r\n      const { data, error } = await supabase\r\n        .from('submissions')\r\n        .select('id,image_path,description,created_at')\r\n        .order('created_at', { ascending: false })\r\n      if (error) { alert(error.message); return }\r\n      setRows(data || [])\r\n\r\n      // Create signed URLs for each image (valid 1 hour)\r\n      const paths = (data || []).map(r => r.image_path)\r\n      if (paths.length) {\r\n        const { data: signed } = await supabase\r\n          .storage.from('photos').createSignedUrls(paths, 3600)\r\n        const map: Record<string, string> = {}\r\n        signed?.forEach(s => { if (s?.signedUrl) map[s.path] = s.signedUrl })\r\n        setUrls(map)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [])\r\n\r\n  return (\r\n    <main className=\"p-6 grid gap-4\">\r\n      <h1 className=\"text-xl font-bold\">My Submissions</h1>\r\n      {rows.map(r => (\r\n        <article key={r.id} className=\"border rounded-xl p-4 grid gap-2\">\r\n          {urls[r.image_path] && (\r\n            <img src={urls[r.image_path]} alt=\"submission\" className=\"w-full rounded-lg\" />\r\n          )}\r\n          <p className=\"whitespace-pre-wrap\">{r.description}</p>\r\n          <time className=\"text-sm opacity-70\">\r\n            {new Date(r.created_at).toLocaleString()}\r\n          </time>\r\n        </article>\r\n      ))}\r\n      {!rows.length && <p>No submissions yet.</p>}\r\n    </main>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;;AACA;AACA;AAFA;;;;AAMe,SAAS;IACtB,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAQ,EAAE;IAC1C,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,iNAAQ,EAAyB,CAAC;IAC1D,MAAM,WAAW,IAAA,wIAAe;IAEhC,IAAA,kNAAS,EAAC;QACR,MAAM,YAAY;YAChB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;YACtD,IAAI,CAAC,MAAM;gBAAE,SAAS,IAAI,GAAG;gBAAiB;YAAO;YACrD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,eACL,MAAM,CAAC,wCACP,KAAK,CAAC,cAAc;gBAAE,WAAW;YAAM;YAC1C,IAAI,OAAO;gBAAE,MAAM,MAAM,OAAO;gBAAG;YAAO;YAC1C,QAAQ,QAAQ,EAAE;YAElB,mDAAmD;YACnD,MAAM,QAAQ,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAA,IAAK,EAAE,UAAU;YAChD,IAAI,MAAM,MAAM,EAAE;gBAChB,MAAM,EAAE,MAAM,MAAM,EAAE,GAAG,MAAM,SAC5B,OAAO,CAAC,IAAI,CAAC,UAAU,gBAAgB,CAAC,OAAO;gBAClD,MAAM,MAA8B,CAAC;gBACrC,QAAQ,QAAQ,CAAA;oBAAO,IAAI,GAAG,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,SAAS;gBAAC;gBACnE,QAAQ;YACV;QACF;QACA;IACF,GAAG,EAAE;IAEL,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC;gBAAG,WAAU;0BAAoB;;;;;;YACjC,KAAK,GAAG,CAAC,CAAA,kBACR,8OAAC;oBAAmB,WAAU;;wBAC3B,IAAI,CAAC,EAAE,UAAU,CAAC,kBACjB,8OAAC;4BAAI,KAAK,IAAI,CAAC,EAAE,UAAU,CAAC;4BAAE,KAAI;4BAAa,WAAU;;;;;;sCAE3D,8OAAC;4BAAE,WAAU;sCAAuB,EAAE,WAAW;;;;;;sCACjD,8OAAC;4BAAK,WAAU;sCACb,IAAI,KAAK,EAAE,UAAU,EAAE,cAAc;;;;;;;mBAN5B,EAAE,EAAE;;;;;YAUnB,CAAC,KAAK,MAAM,kBAAI,8OAAC;0BAAE;;;;;;;;;;;;AAG1B","debugId":null}}]
}