{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DaleCrowder/photo-notes/components/NewSubmissionForm.tsx"],"sourcesContent":["// components/NewSubmissionForm.tsx\r\n'use client'\r\n\r\nimport { useEffect, useMemo, useState, type FormEvent } from 'react'\r\nimport { useRouter } from 'next/navigation'\r\nimport { supabaseBrowser } from '@/lib/supabaseClient'\r\n\r\n/** ---- Tunables for compression ---- */\r\nconst MAX_DIMENSION = 1920;          // px: longest side after resize\r\nconst TARGET_MAX_BYTES = 1_500_000;  // ~1.5MB target size\r\nconst START_QUALITY = 0.85;          // initial quality for compression\r\nconst MIN_QUALITY = 0.5;             // lowest we’ll go on quality\r\nconst SCALE_STEP = 0.85;             // if still too big, scale image down by this factor and retry\r\nconst MAX_ITERATIONS = 8;            // safety cap for compression loops\r\n\r\nexport default function NewSubmissionForm({ userId: _userId }: { userId: string }) {\r\n  const router = useRouter()\r\n  const supabase = supabaseBrowser()\r\n\r\n  const [file, setFile] = useState<File | null>(null)\r\n  const [desc, setDesc] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  // If session disappears, bounce back to /\r\n  useEffect(() => {\r\n    const check = async () => {\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) router.replace('/')\r\n    }\r\n    check()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  // Preview URL for the chosen file\r\n  const previewUrl = useMemo(() => (file ? URL.createObjectURL(file) : null), [file])\r\n  useEffect(() => {\r\n    return () => {\r\n      if (previewUrl) URL.revokeObjectURL(previewUrl)\r\n    }\r\n  }, [previewUrl])\r\n\r\n  const onFileChange = (f: File | null) => {\r\n    setError(null)\r\n    if (!f) { setFile(null); return }\r\n    if (!f.type.startsWith('image/')) { setError('Please choose an image.'); setFile(null); return }\r\n    // Let very large originals through — we’ll compress them below.\r\n    if (f.size > 40 * 1024 * 1024) { setError('Image too large (max 40 MB).'); setFile(null); return }\r\n    setFile(f)\r\n  }\r\n\r\n  const handleSubmit = async (e: FormEvent) => {\r\n    e.preventDefault()\r\n    setError(null)\r\n\r\n    if (!file) { setError('Please select a photo.'); return }\r\n    const trimmed = desc.trim()\r\n    if (!trimmed) { setError('Please write a short description.'); return }\r\n    if (trimmed.length > 2000) { setError('Description is too long (max 2000 chars).'); return }\r\n\r\n    setLoading(true)\r\n    try {\r\n      // Confirm session (helps avoid RLS issues)\r\n      const { data: { user } } = await supabase.auth.getUser()\r\n      if (!user) { setError('You are not signed in.'); router.replace('/'); return }\r\n\r\n      // 1) Resize + compress on client\r\n      const processed = await resizeAndCompress(file, {\r\n        maxDimension: MAX_DIMENSION,\r\n        targetMaxBytes: TARGET_MAX_BYTES,\r\n        startQuality: START_QUALITY,\r\n        minQuality: MIN_QUALITY,\r\n        scaleStep: SCALE_STEP,\r\n        maxIterations: MAX_ITERATIONS,\r\n      })\r\n\r\n      // Name & type for upload\r\n      const ext = processed.ext // 'webp' or 'jpg'\r\n      const uploadFile = new File([processed.blob], `upload.${ext}`, { type: processed.mime })\r\n\r\n      // 2) Build Storage key like: <userId>/<uuid>.<ext>\r\n      const key = `${user.id}/${crypto.randomUUID()}.${ext}`\r\n      console.log('[NewSubmissionForm] Uploading to key:', key, 'size:', uploadFile.size)\r\n\r\n      // 3) Upload to private bucket 'photos'\r\n      const { error: upErr } = await supabase\r\n        .storage.from('photos')\r\n        .upload(key, uploadFile, {\r\n          cacheControl: '3600',\r\n          upsert: false,\r\n          contentType: uploadFile.type,\r\n        })\r\n      if (upErr) {\r\n        console.error('[NewSubmissionForm] upload error:', upErr)\r\n        throw new Error(upErr.message)\r\n      }\r\n\r\n      // 4) Insert DB row via server API (ensures cookies/session are used server-side)\r\n      const res = await fetch('/api/submissions', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ image_path: key, description: trimmed }),\r\n      })\r\n      const bodyText = await res.text()\r\n      console.log('[NewSubmissionForm] /api/submissions status:', res.status, 'body:', bodyText)\r\n      if (!res.ok) {\r\n        let msg = 'Insert failed'\r\n        try { msg = JSON.parse(bodyText).error || msg } catch {}\r\n        throw new Error(msg)\r\n      }\r\n\r\n      router.replace('/my')\r\n    } catch (err: any) {\r\n      setError(err?.message || 'Something went wrong.')\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main className=\"p-6 max-w-3xl mx-auto\">\r\n      <h1 className=\"text-xl font-bold mb-4\">New Submission</h1>\r\n\r\n      <form onSubmit={handleSubmit} className=\"grid gap-4\">\r\n        <div className=\"grid gap-2\">\r\n          <label className=\"font-medium\">Photo</label>\r\n          <input\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            capture=\"environment\"\r\n            onChange={(e) => onFileChange(e.target.files?.[0] ?? null)}\r\n          />\r\n          {previewUrl ? (\r\n            <img src={previewUrl} alt=\"preview\" className=\"mt-2 max-h-80 rounded-lg border\" />\r\n          ) : null}\r\n          <p className=\"text-sm opacity-70\">\r\n            We’ll resize large images to {MAX_DIMENSION}px and compress to ~{Math.round(TARGET_MAX_BYTES / 1024 / 1024 * 10) / 10} MB.\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"grid gap-2\">\r\n          <label htmlFor=\"desc\" className=\"font-medium\">Description</label>\r\n          <textarea\r\n            id=\"desc\"\r\n            className=\"border rounded-xl p-3 min-h-28\"\r\n            placeholder=\"Write a few sentences about the photo…\"\r\n            value={desc}\r\n            onChange={(e) => setDesc(e.target.value)}\r\n            maxLength={2000}\r\n          />\r\n          <div className=\"text-sm opacity-70\">{desc.length}/2000</div>\r\n        </div>\r\n\r\n        {error ? <p className=\"text-red-600\">{error}</p> : null}\r\n\r\n        <div className=\"flex items-center gap-3\">\r\n          <button type=\"submit\" disabled={loading} className=\"border rounded-xl px-4 py-2\">\r\n            {loading ? 'Saving…' : 'Save'}\r\n          </button>\r\n          <button type=\"button\" onClick={() => router.back()} className=\"border rounded-xl px-4 py-2\">\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </main>\r\n  )\r\n}\r\n\r\n/* ======================= Helpers: resize & compress ======================= */\r\n\r\ntype CompressOptions = {\r\n  maxDimension: number\r\n  targetMaxBytes: number\r\n  startQuality: number\r\n  minQuality: number\r\n  scaleStep: number\r\n  maxIterations: number\r\n}\r\n\r\ntype ProcessedImage = {\r\n  blob: Blob\r\n  mime: 'image/webp' | 'image/jpeg'\r\n  ext: 'webp' | 'jpg'\r\n  width: number\r\n  height: number\r\n}\r\n\r\n/**\r\n * Resize the image to fit within maxDimension, then compress to WEBP (fallback JPEG),\r\n * iteratively reducing quality and/or scale until <= targetMaxBytes or limits reached.\r\n */\r\nasync function resizeAndCompress(file: File, opts: CompressOptions): Promise<ProcessedImage> {\r\n  // 1) Decode\r\n  const imgData = await decodeImage(file)\r\n\r\n  // 2) Initial target size based on maxDimension\r\n  let targetW = imgData.width\r\n  let targetH = imgData.height\r\n  const longest = Math.max(targetW, targetH)\r\n  if (longest > opts.maxDimension) {\r\n    const scale = opts.maxDimension / longest\r\n    targetW = Math.round(targetW * scale)\r\n    targetH = Math.round(targetH * scale)\r\n  }\r\n\r\n  // 3) Try WEBP first, fallback to JPEG if not supported\r\n  let mime: 'image/webp' | 'image/jpeg' = 'image/webp'\r\n  if (!await canvasTypeSupported('image/webp')) {\r\n    mime = 'image/jpeg'\r\n  }\r\n\r\n  // 4) Iteratively compress\r\n  let quality = opts.startQuality\r\n  let iterations = 0\r\n  let blob: Blob | null = null\r\n\r\n  while (iterations < opts.maxIterations) {\r\n    const cvs = document.createElement('canvas')\r\n    cvs.width = targetW\r\n    cvs.height = targetH\r\n    const ctx = cvs.getContext('2d')\r\n    if (!ctx) throw new Error('Canvas 2D context not available')\r\n    ctx.drawImage(imgData.image, 0, 0, targetW, targetH)\r\n\r\n    blob = await canvasToBlob(cvs, mime, quality)\r\n\r\n    if (blob && blob.size <= opts.targetMaxBytes) {\r\n      break // success\r\n    }\r\n\r\n    // If quality can still drop, do that first\r\n    if (quality > opts.minQuality) {\r\n      quality = Math.max(opts.minQuality, quality - 0.1)\r\n    } else {\r\n      // Otherwise scale down further and retry\r\n      const newW = Math.round(targetW * opts.scaleStep)\r\n      const newH = Math.round(targetH * opts.scaleStep)\r\n      if (newW < 720 && newH < 720) {\r\n        // don’t shrink forever; accept current blob even if larger than target\r\n        break\r\n      }\r\n      targetW = newW\r\n      targetH = newH\r\n    }\r\n\r\n    iterations++\r\n  }\r\n\r\n  if (!blob) {\r\n    // As a last resort, upload original\r\n    return {\r\n      blob: file,\r\n      mime: file.type.startsWith('image/') ? (file.type as any) : 'image/jpeg',\r\n      ext: file.type === 'image/webp' ? 'webp' : 'jpg',\r\n      width: imgData.width,\r\n      height: imgData.height,\r\n    }\r\n  }\r\n\r\n  // If WEBP failed to produce data, fallback to JPEG once\r\n  if (blob.size === 0 && mime === 'image/webp') {\r\n    mime = 'image/jpeg'\r\n    const cvs = document.createElement('canvas')\r\n    cvs.width = targetW\r\n    cvs.height = targetH\r\n    const ctx = cvs.getContext('2d')\r\n    if (!ctx) throw new Error('Canvas 2D context not available')\r\n    ctx.drawImage(imgData.image, 0, 0, targetW, targetH)\r\n    const jpegBlob = await canvasToBlob(cvs, mime, quality)\r\n    if (jpegBlob) blob = jpegBlob\r\n  }\r\n\r\n  return {\r\n    blob,\r\n    mime,\r\n    ext: mime === 'image/webp' ? 'webp' : 'jpg',\r\n    width: targetW,\r\n    height: targetH,\r\n  }\r\n}\r\n\r\nasync function canvasToBlob(canvas: HTMLCanvasElement, type: string, quality: number): Promise<Blob> {\r\n  return new Promise<Blob>((resolve, reject) => {\r\n    canvas.toBlob((b) => {\r\n      if (!b) return reject(new Error('Failed to create blob'))\r\n      resolve(b)\r\n    }, type, quality)\r\n  })\r\n}\r\n\r\nasync function canvasTypeSupported(type: string): Promise<boolean> {\r\n  const c = document.createElement('canvas')\r\n  if (!('toDataURL' in c)) return false\r\n  const data = c.toDataURL(type)\r\n  return data.startsWith(`data:${type}`)\r\n}\r\n\r\nasync function decodeImage(file: File): Promise<{ image: CanvasImageSource, width: number, height: number }> {\r\n  // Try ImageBitmap (fast, may auto-honor EXIF in some browsers)\r\n  try {\r\n    const bmp = await createImageBitmap(file)\r\n    return { image: bmp, width: bmp.width, height: bmp.height }\r\n  } catch {\r\n    // Fallback: HTMLImageElement\r\n    const url = URL.createObjectURL(file)\r\n    try {\r\n      const img = await loadHtmlImage(url)\r\n      return { image: img, width: img.naturalWidth, height: img.naturalHeight }\r\n    } finally {\r\n      URL.revokeObjectURL(url)\r\n    }\r\n  }\r\n}\r\n\r\nfunction loadHtmlImage(url: string): Promise<HTMLImageElement> {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image()\r\n    img.onload = () => resolve(img)\r\n    img.onerror = (e) => reject(new Error('Failed to load image'))\r\n    img.src = url\r\n  })\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DaleCrowder/photo-notes/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}